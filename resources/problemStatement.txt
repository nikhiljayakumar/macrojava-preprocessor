Macro expansion and Parsing for MacroJava
Use Flex and Bison to write a MacroJava to MiniJava translator. 
Your Flex file should be named P1.l and your Bison file should be named P1.y and if X.Java contains a valid MacroJava program to be processed then

bison -d P1.y
flex P1.l
gcc P1.tab.c lex.yy.c -lfl -o P1
./P1 < X.java > Y.java

should generate the correct minijava code in Y.java. Note, your program must take input from standard input and write to standard output (so that we can use the redirection). 
The format for the minijava programs is given by the minijava grammar. If the input macrojava code does not parse then output
"// Failed to parse macrojava code." 

MacroJava
MacroJava is a subset of Java extended with C style macros. The meaning of a MacroJava program is given by its meaning as a Java program (after macro processing). 
Overloading is not allowed in MacroJava. The MacroJava statement System.out.println( ... ); can only print integers. 
The MacroJava expression e1 & e2 is of type boolean, and both e1 and e2 must be of type boolean. 
MacroJava supports both inline as well as C style comments, but does not support nested comments. 
MacroJava Specification (https://www.cse.iitm.ac.in/~krishna/cs3300/macrojava-spec.html#prod48)

MiniJava
MiniJava is a subset of Java. The meaning of a MiniJava program is given by its meaning as a Java program. Overloading is not allowed in MiniJava. 
The MiniJava statement System.out.println( ... ); can only print integers. 
The MiniJava expression e1 & e2 is of type boolean, and both e1 and e2 must be of type boolean.
MiniJava Specification (https://www.cse.iitm.ac.in/~krishna/cs3300/minijava-spec.html)